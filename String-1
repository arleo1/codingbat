# Given a string name, e.g. "Bob", print a greeting of the form "Hello Bob!".

name = input("Enter name: ")
print("Hello " + name + "!")

# Given two strings, a and b, print the result of putting them together in the order abba, e.g. "Hi" and "Bye" returns "HiByeByeHi".

a = "Hi"
b = "Bye"
print(a,b,b,a)

# The web is built with HTML strings like "<i>Yay</i>" which draws Yay as italic text. 
# In this example, the "i" tag makes <i> and </i> which surround the word "Yay".
# Given tag and word strings, print the HTML string with tags around the word, e.g. "<i>Yay</i>".

a = "<i>"
b = "Yay"
c = "</i>"
print(a+b+c)

# Given an "out" string length 4, such as "<<>>", and a word, 
# print a new string where the word is in the middle of the out string, e.g. "<<word>>".

def make_out_word(out, word):
    print(out[0:2]+word+out[2:4])
    
# Given a string, print a new string made of 3 copies of the last 2 chars of the original string. 
# The string length will be at least 2.

def extra_end(str):
    print(str[-2:]*3)

# Given a string, print the string made of its first two chars, so the String "Hello" yields "He". 
# If the string is shorter than length 2, return whatever there is, so "X" yields "X", 
# and the empty string "" yields the empty string "".

def first_two(str):
    print(str[0:2])
    
# Given a string of even length, print the first half. So the string "WooHoo" yields "Woo".

def first_half(str):
    print(str[:len(str)/2])
    
# Given a string, print a version without the first and last char, so "Hello" yields "ell". The string length will be at least 2.

def without_end(str):
    print(str[1:-1])
    
# Given 2 strings, a and b, print a string of the form short+long+short, 
# with the shorter string on the outside and the longer string on the inside. 
# The strings will not be the same length, but they may be empty (length 0).

def combo_string(a, b):
    if len(a)<=len(b):
        print(a+b+a)
    else:
        print(b+a+b)
 
# Given 2 strings, print their concatenation, except omit the first char of each. The strings will be at least length 1.

def non_start(a, b):
    print(a[1::]+b[1::])
    
# Given a string, print a "rotated left 2" version where the first 2 chars are moved to the end. The string length will be at least 2.

def left2(str):
    print(str[2::]+str[0:2])
