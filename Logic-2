# Given 3 int values, a b c, return their sum. 
# However, if one of the values is 13 then it does not count towards the sum and values to its right do not count. 
# So for example, if b is 13, then both b and c do not count.
def lucky_sum(a, b, c):
    if a==13:
        print(0)
    elif b==13:
        print(a)
    elif c==13:
        print(a+b)
    else:
        print(a+b+c)

# Given 3 int values, a b c, print their sum. 
# However, if any of the values is a teen -- in the range 13..19 inclusive -- then that value counts as 0, 
# except 15 and 16 do not count as a teens. Write a separate helper "def fix_teen(n):"that takes in an int value and 
# returns that value fixed for the teen rule. In this way, you avoid repeating the teen code 3 times (i.e. "decomposition"). 
# Define the helper below and at the same indent level as the main no_teen_sum().
def no_teen_sum(a, b, c):
    print(fix_teen(a) + fix_teen(b) + fix_teen(c))
    
def fix_teen(n):
    if 13 <= n and n <= 19 and n != 15 and n!= 16:
        return 0
    return n
   
# For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. 
# Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. 
# Given 3 ints, a b c, return the sum of their rounded values. 
# To avoid code repetition, write a separate helper "def round10(num):" and call it 3 times. 
# Write the helper entirely below and at the same indent level as round_sum(). 
def round_sum(a, b, c):
    print(round10(a)+round10(b)+round10(c))

def round10(num):
    if num%10 < 5:
        num+= num - (num % 10)
    return num + (10-num % 10)
